{"version":3,"sources":["components/Spinner.jsx","components/Login.jsx","components/User.jsx","components/Users.jsx","components/Avatar.jsx","components/Message.jsx","components/PrivateChat.js","components/Logout.jsx","components/Router.js","App.js","serviceWorker.js","index.js"],"names":["Spinner","react_default","a","createElement","style","width","height","display","src","alt","margin","transform","dotenv","config","Login","_useState","useState","_useState2","Object","slicedToArray","email","setEmail","_useState3","_useState4","password","setPassword","_useState5","_useState6","loading","setLoading","loginProcess","_ref","asyncToGenerator","regenerator_default","mark","_callee2","e","wrap","_context2","prev","next","preventDefault","axios","post","then","_ref2","_callee","res","token","_ref3","currentUser","_context","data","get","concat","sent","user","localStorage","setItem","id","username","firstName","lastName","t0","console","log","response","window","location","href","stop","_x2","apply","this","arguments","catch","error","_x","className","marginTop","marginRight","marginLeft","placeContent","onSubmit","type","vakue","onChange","target","value","components_Spinner","User","linkToUser","react_router_dom","to","Users","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","componentWillMount","socket","assertThisInitialized","getItem","on","emit","receiver","unreadCount","setState","warning","componentDidMount","headers","Content-Type","Accept","meData","me","followers","length","availUsers","forEach","follower","userId","push","followedUser","users","message","state","SocketIO","connect","_this$state","react","map","single","components_User","key","Component","Avatar","Message","sender","padding","components_Avatar","PrivateChat","params","_res","match","Axios","profile","receiverInfo","messages","time","createdAt","toConsumableArray","t1","toast","clear","sendMessage","socketUrl","socketId","_this2","senderNames","senderUsername","senderInfo","names","components_Message","marginBottom","Logout","MainRouter","react_router","exact","path","component","App","Router","react_toastify","Boolean","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0ddf4e3c.chunk.js","sourcesContent":["import React from 'react';\n\nconst Spinner=()=>(\n  <div\n  style={{\n    width:'100%',\n    height:'100%',\n    display:'flex'\n  }}\n  >\n    <img\n      src='https://loading.io/spinners/disqus/index.discuss-messesage-preloader.gif'\n      alt='spinner'\n      style={{\n        margin:'auto',\n        transform:'translateY(70%)'\n      }}\n    />\n  </div>\n  \n);\n\nexport default Spinner;","import React, {useState} from 'react';\nimport axios from 'axios';\nimport dotenv from 'dotenv';\n\nimport Spinner from './Spinner';\nimport { toast } from 'react-toastify';\n\ndotenv.config();\n\nconst Login=()=>{\n  const [email,setEmail]=useState('');\n  const [password,setPassword]=useState('');\n  const [loading,setLoading]=useState(false);\n\n  const loginProcess=async (e)=>{\n    e.preventDefault();\n    setLoading(true);\n    axios.post('http://localhost:3000/api/auth/login',{\n        email,\n        password\n    }).then(async (res)=>{\n      const {data:{token}}=res.data;\n      try{\n        const {data:{user:currentUser}} = await axios.get(`http://localhost:3000/api/chats/currentUser/?token=${token}`);\n        localStorage.setItem('CURRENT_USER_ID', currentUser.id);\n        localStorage.setItem('CURRENT_USER_USERNAME', currentUser.username);\n        localStorage.setItem('CURRENT_USER_NAMES', `${currentUser.firstName} ${currentUser.lastName}`);\n        localStorage.setItem('CURRENT_USER_EMAIL', currentUser.email);\n      } catch(error){\n        console.log(error.response.data);\n      }\n      \n\n      localStorage.setItem('ACCESS_TOKEN',token);\n      window.location.href='/users';\n      setLoading(false);\n    })\n    .catch(error=>{\n      console.log(error.response.data.data);\n      setLoading(false);\n    })\n  \n  }\n  return(\n    <form className='container' style={{\n      marginTop:30,\n      marginRight:30,\n      marginLeft:30,\n      display:'grid',\n      placeContent:'center',\n      height:'80vh',\n      width:'80vw'\n    }}\n    onSubmit={loginProcess}\n    > \n      <div className='field'>\n        <label className='label'>Email</label>\n        <div className='control'>\n          <input \n          className='input'\n          type='email'\n           vakue={email} \n           onChange={(e)=>setEmail(e.target.value)}\n           />\n        </div>\n      </div>\n      <div className='field'>\n        <label className='label'>Password</label>\n        <div className='control'>\n          <input\n            className='input'\n            type='password'\n            vakue={password}\n            onChange={(e) => setPassword(e.target.value)}\n          />\n        </div>\n      </div>\n      <button type='submit' className='button'>Login</button>\n      {loading?<Spinner/>:null}\n    </form>\n  )\n}\n\nexport default Login;","import React from 'react';\nimport {Link} from 'react-router-dom';\nconst User=({user})=>{\n  const linkToUser=`/chats/${user.username}`;\n  return(\n    <Link className='list-item' to={linkToUser}>\n      {user.username}\n    </Link>\n  )\n}\n\nexport default User;","import React ,{Component,Fragment} from 'react';\nimport SocketIO from 'socket.io-client';\nimport axios from 'axios';\nimport User from './User';\n\nexport default class Users extends Component{\n  constructor(props){\n    super(props);\n    this.state={\n      users:[],\n      me:{},\n      warning:''\n    }\n\n    this.socket=SocketIO.connect('http://localhost:5000');\n  }\n\n  componentWillMount=()=>{\n    const {socket}=this;\n    const token=localStorage.getItem('ACCESS_TOKEN');\n    socket.on('connect',()=>{\n      socket.emit('user_back',token);\n    });\n\n    const currentUser = localStorage.getItem('CURRENT_USER_USERNAME');\n    socket.on('message_unread', ({ receiver, unreadCount }) => {\n      console.log('Something is happening...');\n      if (currentUser === receiver) {\n        this.setState({\n          warning: `You have ${unreadCount} messages unread`\n        });\n      }\n    });\n    \n  }\n\n  componentDidMount=()=>{\n    const token=localStorage.getItem('ACCESS_TOKEN');\n    axios.get('http://localhost:3000/api/chats/users', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n        token\n      }\n    }).then(res => {\n      console.log(res.data);\n      const meData = res.data.me;\n      const { data } = res;\n      if (data.followers.length) {\n        let availUsers = [];\n        data.followers.forEach(follower => {\n          if (follower.userId === meData.id) {\n            availUsers.push(follower.follower);\n          }\n          else {\n            availUsers.push(follower.followedUser);\n          }\n        });\n        this.setState({\n          users:availUsers\n        });\n      }\n      this.setState({\n        me:meData\n      })\n      \n    }).catch(error => {\n      console.log(error);\n      console.log(error.response.data.message);\n      if (error.response.data.message === 'jwt expired' || error.response.data.error) {\n        window.location.href = '/';\n      }\n    });\n  }\n\n  render(){\n    const {me,users,warning}=this.state;\n    return (\n      <Fragment>\n        <div>Welcome back {me.firstName} {me.lastName}, select users to chat with.</div>\n        <div className='list is-hoverable' style={{\n          marginLeft: '10%',\n          marginRight: '10%'\n        }}>\n          {users.map(single => (\n            <User user={single} key={single.id} />\n          )) || <p>No users yet!</p>}\n        </div>\n        {warning?(\n          <div className='notification is-warning'>\n            {warning}\n          </div>\n          ):null}\n          {!users.length?(\n            <div className='notification is-danger'>\n              <p>No users to chat with...</p>\n            </div>\n          ):null}\n      </Fragment>\n    )\n  }\n}","import React,{Fragment} from 'react';\n\nconst Avatar=()=>{\n  return(\n    <Fragment>\n      <img \n      className='is-rounded'\n       alt='chat-avatar'\n       style={{\n         width:30,\n         height:30\n       }}\n        src='http://www.sclance.com/pngs/png-avatar/png_avatar_1048755.png'\n       />\n    </Fragment>\n  )\n}\n\nexport default Avatar;","import React ,{Fragment} from 'react';\nimport Avatar from './Avatar';\n\nconst Message=({message})=>{\n  const currentUser=localStorage.getItem('CURRENT_USER_USERNAME');\n  if(message.sender===currentUser){\n    return(\n      <Fragment>\n        <div className='list-item'>\n          <div className='columns is-mobile'>\n            <div className='column is-two-thirds'>\n              <i>{message.message}</i>\n            </div>\n            <div className='column is-one-third'>\n              <div className='columns is-mobile' style={{\n                padding:20\n              }}>\n                  <Avatar/> &nbsp; &nbsp;\n                  <strong>{currentUser}</strong>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Fragment>\n    )\n  }\n  else{\n    return(\n      <Fragment>\n        <div className='list-item'>\n          <div className='columns is-mobile'>\n            <div className='column is-one-third'>\n              <div className='columns is-mobile' style={{\n                padding:20\n              }}>\n                <Avatar />\n                <strong>{message.sender}</strong>\n              </div>\n            </div>\n            <div className='column is-two-thirds'><i>{message.message}</i></div>\n          </div>\n        </div>\n      </Fragment>\n    )\n  }\n}\n\nexport default Message;","import React, {Component,Fragment} from 'react';\nimport SocketIO from 'socket.io-client';\nimport {Link} from 'react-router-dom';\nimport {toast} from 'react-toastify';\nimport Message from './Message';\nimport Axios from 'axios';\nimport Spinner from './Spinner';\n\nexport default class PrivateChat extends Component{\n  constructor(props){\n    super(props);\n    this.state={\n      socketUrl:'http://localhost:5000/chats',\n      message:'',\n      messages:[],\n      error:'',\n      loading:false,\n      socketId:'',\n      receiverInfo:{}\n    }\n    this.socket=SocketIO.connect(this.state.socketUrl);\n  }\n\n  componentWillMount=async ()=>{\n    const {params}=this.props.match;\n    this.setState({\n      loading:true\n    });\n    try{\n      const res = await Axios.get(`http://localhost:3000/api/profiles/${params.username}`);\n      console.log(res.data.profile);\n      this.setState({\n        loading:false,\n        receiverInfo:res.data.profile\n      });\n    } catch(error){\n      console.log(error.response.data.message);\n      this.setState({\n        error:error.response.data.message,\n        loading:false\n      });\n    }\n\n    try{\n      const token=localStorage.getItem('ACCESS_TOKEN');\n      const res=await Axios.get(`http://localhost:3000/api/chats/${params.username}`,{\n        headers:{\n          token\n        }\n      });\n      console.log(res.data.messages);\n      res.data.messages.map(message=>{\n        const single={};\n        single.message=message.message;\n        single.sender=message.sender.username;\n        single.receiver=message.receiver.username;\n        single.time=message.createdAt;\n        console.log(single);\n        this.setState({\n          messages:[...this.state.messages,single]\n        });\n      });\n      // this.setState({\n      //   messages:res.data.messages\n      // })\n    } catch(error){\n      console.log(error.response.data);\n      if(error.response.data.message==='jwt expired'){\n        toast.error('Token expired, please go login again');\n        localStorage.clear();\n        window.location.href='/';\n      }\n    }\n    \n\n  }\n\n  componentDidMount=()=>{\n    const {socket}=this;\n    const token=localStorage.getItem('ACCESS_TOKEN');\n    socket.on('connect',()=>{\n      console.log('We are connected');\n      const username=localStorage.getItem('CURRENT_USER_USERNAME');\n      console.log(username);\n      socket.emit('new_user',token);\n    });\n    socket.on('chat', (data) => {\n      const {params}=this.props.match;\n      const currentUser = localStorage.getItem('CURRENT_USER_USERNAME');\n      console.log('CurrentUser',currentUser);\n      console.log('Sender',data.sender);\n      console.log('Receiver',data.receiver);\n      console.log('Data sender',data.receiver,'User To Chat',params.username);\n      if((data.receiver===currentUser) || (data.sender===currentUser)){\n        this.setState({\n          messages: [...this.state.messages, data]\n        });\n        \n       \n      }\n    });\n\n    socket.on('no_auth',({message})=>{\n        toast.error(message);\n    })\n  }\n  \n  sendMessage=e=>{\n    const {params}=this.props.match;\n    const sender=localStorage.getItem('CURRENT_USER_USERNAME');\n    e.preventDefault();\n    this.socket.emit('chat',{\n      message:this.state.message,\n      receiver:params.username,\n      sender\n    });\n    \n  }\n  render(){\n    const {params}=this.props.match;\n    const {message,error,loading,receiverInfo}=this.state;\n\n    const senderNames=localStorage.getItem('CURRENT_USER_NAMES');\n    const senderUsername=localStorage.getItem('CURRENT_USER_USERNAME');\n    const senderEmail=localStorage.getItem('CURRENT_USER_EMAIL');\n    const senderInfo={\n      names:senderNames,\n      email:senderEmail,\n      username:senderUsername\n    }\n    if(loading){\n      return <Spinner/>\n    }\n    if(error){\n      toast.error('This user does not exist!');\n      window.location.href='/users';\n    }\n    return(\n      <Fragment>\n        <h1\n        style={{\n          marginTop:20\n        }}\n        >Your conversation with <strong>{params.username}</strong></h1>\n        <br />\n        <div className='card'>\n          <header className='caed-header'>\n            <p className=\"card-header-title\">\n              Messages\n    </p>\n          </header>\n          <div className='card-content'>\n            <div className='list is-hoverable'>\n              {this.state.messages.map(single=>(\n                <Message message={single} key={single.id} receiverInfo={receiverInfo} senderInfo={senderInfo}/>\n              ))}\n            </div>\n          </div>\n          <form className='card-footer'\n          onSubmit={this.sendMessage}\n          >\n            <div className='card-footer-item'>\n              <textarea\n                className='textarea'\n                value={message}\n                onChange={(e) =>this.setState({message:e.target.value})}\n              ></textarea>\n            </div>\n            <div className='card-footer-item'>\n              <button type='submit' className='button'>Send</button>\n            </div>\n          </form>\n          <Link to='/logout' className='button' style={{\n            marginTop:40,\n            marginBottom:20\n          }}>Logout</Link>\n        </div>\n      </Fragment>\n    )\n  }\n}","import React, {Fragment} from 'react';\n\nconst Logout=()=>{\n  localStorage.clear();\n  window.location.href='/';\n  return <Fragment/>\n};\n\nexport default Logout;","import React from 'react';\nimport {BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Login from './Login';\nimport Users from './Users';\nimport PrivateChat from './PrivateChat';\nimport Logout from './Logout';\n\nconst MainRouter=()=>(\n  <Router>\n    <Switch>\n      <Route exact path='/users' component={Users}/>\n      <Route exact path='/chats/:username' component={PrivateChat}/>\n      <Route exact path='/' component={Login} />\n      <Route exact path='/logout' component={Logout}/>\n    </Switch>\n  </Router>\n);\n\nexport default MainRouter;","import React from 'react';\nimport {ToastContainer} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport 'bulma/css/bulma.min.css';\nimport MainRouter from './components/Router';\nimport './App.css';\n\nconst App=()=> {\n  return (\n    <div className=\"App\">\n      <MainRouter/>\n      <ToastContainer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}